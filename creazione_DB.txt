CREATE DATABASE torneo_db;

USE torneo_db;

-- Tabella Torneo
CREATE TABLE Torneo (
    id INT PRIMARY KEY AUTO_INCREMENT,   -- Identificativo univoco del torneo
    nome VARCHAR(100) NOT NULL,          -- Nome del torneo
    data_inizio DATE NOT NULL,           -- Data di inizio del torneo
    data_fine DATE NOT NULL,             -- Data di fine del torneo
    fascia_oraria VARCHAR(50) NOT NULL,  -- Fascia oraria del torneo (es. "18:00 - 22:00")
    formato ENUM('DRAFT', 'ARAM') DEFAULT 'DRAFT', -- Formato torneo
    is_active BOOLEAN DEFAULT TRUE       -- Indica se il torneo è attivo o archiviato
);

-- Tabella Squadra
CREATE TABLE Squadra (
    id INT PRIMARY KEY AUTO_INCREMENT,  -- Identificativo univoco della squadra
    nome VARCHAR(100) NOT NULL,         -- Nome della squadra
    data_iscrizione DATE NOT NULL,  -- Data di iscrizione della squadra al circuito
    is_active BOOLEAN DEFAULT TRUE      -- Indica se la squadra è attiva o ritirata
);

-- Tabella Giocatore
CREATE TABLE Giocatore (
    id INT PRIMARY KEY AUTO_INCREMENT,   -- Identificativo univoco del giocatore
    nome VARCHAR(100) NOT NULL,          -- Nome del giocatore
    squadra_id INT NOT NULL,             -- Squadra di appartenenza
    data_iscrizione DATE NOT NULL,  -- Data di iscrizione del giocatore al circuito
    is_active BOOLEAN DEFAULT TRUE,      -- Indica se il giocatore è attivo o ritirato
    FOREIGN KEY (squadra_id) REFERENCES Squadra(id) ON DELETE CASCADE
);

-- Iscrizione Squadra e Torneo
CREATE TABLE Iscrizione (
  id INT AUTO_INCREMENT PRIMARY KEY,
  squadra_id INT NOT NULL,
  torneo_id INT NOT NULL,
  data_iscrizione DATE NOT NULL,
  quota_iscrizione DECIMAL(8,2),
  FOREIGN KEY (squadra_id) REFERENCES Squadra(id) ON DELETE CASCADE,
  FOREIGN KEY (torneo_id) REFERENCES Torneo(id) ON DELETE CASCADE
);

-- Lista Campioni
CREATE TABLE Campione (
    id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(100) NOT NULL
);


-- Tabella Partita
CREATE TABLE Partita (
    id INT PRIMARY KEY AUTO_INCREMENT,      -- Identificativo univoco della partita
    torneo_id INT NOT NULL,                 -- Torneo in cui si gioca la partita
    squadra_rossa_id INT NOT NULL,          -- Squadra assegnata al lato rosso
    squadra_blu_id INT NOT NULL,            -- Squadra assegnata al lato blu
    vincitore_id INT,                       -- Squadra vincitrice (può essere NULL in caso di pareggio)
    data_evento DATE NOT NULL,              -- Data della partita
    durata_minuti INT DEFAULT NULL,         -- Durata della partita in minuti
    draghi_rossa INT DEFAULT 0,             -- Numero di draghi presi dalla Squadra Rossa
    draghi_blu INT DEFAULT 0,               -- Numero di draghi presi dalla Squadra Blu
    anima_drago_id INT,                     -- ID della squadra che ha preso l'Anima del Drago
    anima_drago_tipo VARCHAR(50),           -- Tipo di Anima del Drago (es. "Inferno", "Tempesta", ecc.)
    drago_anziano_rossa INT DEFAULT NULL,   -- Indica se la squadra rossa ha preso il Drago Anziano (ID della squadra o NULL)
    drago_anziano_blu INT DEFAULT NULL,     -- Indica se la squadra blu ha preso il Drago Anziano (ID della squadra o NULL)
    baroni_rossa INT DEFAULT 0,             -- Numero di baroni presi dalla Squadra Rossa
    baroni_blu INT DEFAULT 0,               -- Numero di baroni presi dalla Squadra Blu
    araldo_rossa INT DEFAULT 0,             -- Numero di Herald (Araldo della Landa) presi dalla Squadra Rossa
    araldo_blu INT DEFAULT 0,               -- Numero di Herald (Araldo della Landa) presi dalla Squadra Blu
    atakhan_taken INT,                      -- Squadra che ha preso Atakhan (NULL se non preso)
    atakhan_side VARCHAR(50),               -- Dove è comparso Atakhan ('Top' o 'Bot')
    modalita ENUM('BO1', 'BO3', 'BO5') DEFAULT 'BO1', -- Formato della partita (Best of 1, 3, 5)
    fase_torneo ENUM('Gruppi', 'Quarti', 'Semifinale', 'Finale') DEFAULT 'Gruppi', -- Fase del torneo
    serie_id INT NULL,                      -- ID della serie a cui appartiene la partita (NULL se partita singola)
    numero_partita_nella_serie INT DEFAULT 1, -- Numero progressivo della partita nella serie
    FOREIGN KEY (torneo_id) REFERENCES Torneo(id) ON DELETE CASCADE,
    FOREIGN KEY (squadra_rossa_id) REFERENCES Squadra(id) ON DELETE CASCADE,
    FOREIGN KEY (squadra_blu_id) REFERENCES Squadra(id) ON DELETE CASCADE,
    FOREIGN KEY (vincitore_id) REFERENCES Squadra(id),
    FOREIGN KEY (atakhan_taken) REFERENCES Squadra(id),
    FOREIGN KEY (serie_id) REFERENCES Partita(id) -- Serie a cui appartiene la partita
);

-- Tabella PickBanPartita
CREATE TABLE PickBanPartita (
    id INT PRIMARY KEY AUTO_INCREMENT,    -- Identificativo univoco del pick/ban
    partita_id INT NOT NULL,             -- Partita a cui si riferiscono i pick/ban
    squadra_id INT NOT NULL,             -- Squadra che ha fatto il pick/ban
    champion_id INT NOT NULL,            -- Campione (FK su Campione)
    tipo ENUM('pick', 'ban') NOT NULL,   -- Indica se è un "pick" o un "ban"
    ordine INT NOT NULL,                 -- Ordine del pick/ban nella selezione
    ruolo ENUM('TOP', 'JUNGL', 'MID', 'ADC', 'SUPP'),      -- Ruolo del campione (opzionale)
    FOREIGN KEY (partita_id) REFERENCES Partita(id) ON DELETE CASCADE,
    FOREIGN KEY (squadra_id) REFERENCES Squadra(id) ON DELETE CASCADE,
    FOREIGN KEY (champion_id) REFERENCES Campione(id) ON DELETE CASCADE
);

-- Tabella NotaPartita
CREATE TABLE NotaPartita (
    id INT PRIMARY KEY AUTO_INCREMENT,     -- Identificativo univoco della nota
    partita_id INT NOT NULL,               -- Partita a cui è associata la nota
    data_creazione TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Data e ora in cui la nota è stata aggiunta
    testo TEXT NOT NULL,                   -- Contenuto della nota
    FOREIGN KEY (partita_id) REFERENCES Partita(id) ON DELETE CASCADE
);

-- Tabella StatisticheGiocatorePartita
CREATE TABLE StatisticheGiocatorePartita (
    id INT PRIMARY KEY AUTO_INCREMENT,    -- Identificativo univoco della statistica
    partita_id INT NOT NULL,              -- Partita a cui si riferiscono le statistiche
    giocatore_id INT NOT NULL,            -- Giocatore a cui appartengono le statistiche
    campione_usato VARCHAR(50) NOT NULL,  -- Campione giocato in questa partita
    kills INT DEFAULT 0,                  -- Numero di uccisioni
    deaths INT DEFAULT 0,                 -- Numero di morti
    assists INT DEFAULT 0,                -- Numero di assist
    danni_totali_campioni INT DEFAULT 0,  -- Danni totali inflitti ai campioni nemici
    danni_presi_totali INT DEFAULT 0,     -- Danno ricevuto dal giocatore
    cure_totali INT DEFAULT 0,            -- Cure totali effettuate
    oro_totale INT DEFAULT 0,             -- Oro guadagnato dal giocatore
    torri_distrutte INT DEFAULT 0,        -- Torri distrutte dal giocatore
    inibitori_distrutti INT DEFAULT 0,    -- Inibitori distrutti dal giocatore
    danni_obbiettivi INT DEFAULT 0,       -- Danno inflitto agli obiettivi (torri, draghi, baroni)
    minion_kill INT DEFAULT 0,            -- Numero di minion eliminati
    mostri_uccisi INT DEFAULT 0,          -- Numero di mostri neutrali uccisi dal giocatore
    wards_piazzate INT DEFAULT 0,         -- Numero di ward posizionate
    wards_distrutte INT DEFAULT 0,        -- Numero di ward distrutte
    punteggio_visione INT DEFAULT 0,      -- Punteggio di visione (dati sulle ward, ecc.)
    primo_sangue BOOLEAN DEFAULT FALSE,   -- Indica se il giocatore ha fatto il primo sangue
    serie_piu_lunga INT DEFAULT 0,        -- Massimo numero di uccisioni consecutive senza morire
    maggiore_uccisione_multipla INT DEFAULT 0, -- Numero massimo di uccisioni multiple (tripla, quadruplica, pentakill)
    FOREIGN KEY (partita_id) REFERENCES Partita(id) ON DELETE CASCADE,
    FOREIGN KEY (giocatore_id) REFERENCES Giocatore(id) ON DELETE CASCADE,
	CREATE TABLE StatisticheGiocatorePartita (
    id INT PRIMARY KEY AUTO_INCREMENT,    -- Identificativo univoco della statistica
    partita_id INT NOT NULL,              -- Partita a cui si riferiscono le statistiche
    giocatore_id INT NOT NULL,            -- Giocatore a cui appartengono le statistiche
    campione_usato VARCHAR(50) NOT NULL,  -- Campione giocato in questa partita
    kills INT DEFAULT 0,                  -- Numero di uccisioni
    deaths INT DEFAULT 0,                 -- Numero di morti
    assists INT DEFAULT 0,                -- Numero di assist
    danni_totali_campioni INT DEFAULT 0,  -- Danni totali inflitti ai campioni nemici
    danni_presi_totali INT DEFAULT 0,     -- Danno ricevuto dal giocatore
    cure_totali INT DEFAULT 0,            -- Cure totali effettuate
    oro_totale INT DEFAULT 0,             -- Oro guadagnato dal giocatore
    torri_distrutte INT DEFAULT 0,        -- Torri distrutte dal giocatore
    inibitori_distrutti INT DEFAULT 0,    -- Inibitori distrutti dal giocatore
    danni_obbiettivi INT DEFAULT 0,       -- Danno inflitto agli obiettivi (torri, draghi, baroni)
    minion_kill INT DEFAULT 0,            -- Numero di minion eliminati
    mostri_uccisi INT DEFAULT 0,          -- Numero di mostri neutrali uccisi dal giocatore
    wards_piazzate INT DEFAULT 0,         -- Numero di ward posizionate
    wards_distrutte INT DEFAULT 0,        -- Numero di ward distrutte
    punteggio_visione INT DEFAULT 0,      -- Punteggio di visione (dati sulle ward, ecc.)
    primo_sangue BOOLEAN DEFAULT FALSE,   -- Indica se il giocatore ha fatto il primo sangue
    serie_piu_lunga INT DEFAULT 0,        -- Massimo numero di uccisioni consecutive senza morire
    maggiore_uccisione_multipla INT DEFAULT 0, -- Numero massimo di uccisioni multiple (tripla, quadruplica, pentakill)
    FOREIGN KEY (partita_id) REFERENCES Partita(id) ON DELETE CASCADE,
    FOREIGN KEY (giocatore_id) REFERENCES Giocatore(id) ON DELETE CASCADE,
    FOREIGN KEY (campione_usato) REFERENCES Campione(id) ON DELETE CASCADE
);
);
